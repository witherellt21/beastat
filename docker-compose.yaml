version: '3.9'

networks:
  dem:

services:

  # db:
  #   image: "postgres:latest"
  #   container_name: nbastats-db
  #   # volumes:
  #   #   - ${DB_VOLUME}:/var/lib/postgresql/data
  #   expose:
  #     - ${DB_PORT}
  #   ports:
  #     - ${DB_PORT}:5432
  #   environment:
  #     POSTGRES_DB: ${DB_NAME}
  #     POSTGRES_USER: ${DB_USER}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   restart: on-failure
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - dem
  postgres:
    image: postgres:latest
    container_name: beastat_db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # POSTGRES_PORT
    expose:
      - ${DB_PORT}
    ports:
      - ${DB_PORT}:5432
    networks:
      - dem
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - 5000:80
    depends_on:
      - postgres
    networks:
      - dem


  app:
    build:
      context: ./backend
      dockerfile: Dockerfile.scraper
    command: bash -c "bash ./scripts/setupServer.sh && bash ./scripts/startScraper.sh"
    restart: on-failure
    env_file:
      - path: ./.env
        required: true
    depends_on:
      - postgres
    networks:
      - dem
    

  # scraper-app:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.scraper
  #   container_name: beastat_scraper
  #   # volumes:
  #   #   - server:/app/backend
  #   env_file:
  #     - path: ./.env
  #       required: true
  #   ports:
  #     - ${SCRAPER_PORT}:8080
  #   links:
  #     - db
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   restart: on-failure

  # web-app:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.app
  #   container_name: beastat-app
  #   env_file:
  #     - path: ./.env
  #       required: true
  #   # volumes:
  #   #   - server:/app/backend
  #   ports:
  #     - ${WEB_PORT}:8080
  #   links:
  #     - db
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   restart: on-failure


# volumes:
#   server: